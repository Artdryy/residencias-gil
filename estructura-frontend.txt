frontend ->
index.html:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + Vue</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>

package-lock.json:

package.json:

README.md:

vite.config.js:
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import path from 'path'
export default defineConfig({
  plugins: [vue()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src')    },
  },
})

.vscode ->
extensions.json:
{
  "recommendations": ["Vue.volar"]
}

node_modules ->

public (vacia) ->

src ->
App.Vue:
<template>
  <router-view />
</template>

<script>
export default {
  name: 'App'
}
</script>

<style scoped>
</style>

main.js:
    import { createApp } from 'vue';
    import App from './App.vue';
    import router from './router';

    import '@/assets/styles/base.css';
    import '@fortawesome/fontawesome-free/css/all.css';
    import '@fortawesome/fontawesome-free/js/all.js';

    createApp(App).use(router).mount('#app');

style.css:
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

.card {
  padding: 2em;
}

#app {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

assets ->

logoexpanded.png
logo.png

styles->
base.css:
/* ===== IMPORTACIÓN FUENTES ===== */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@500;600;700&family=Inter:wght@400;500&display=swap');

/* ===== VARIABLES MAESTRAS ===== */
:root {
  --bg-light: #EFF2F9;
  --bg-card: #E4EBF1;
  --gray-1: #B5BFC6;
  --gray-2: #6E7F8D;
  --text-dark: #2A3646;

  --shadow-raise: -4px -4px 8px rgba(255, 255, 255, 0.8),
                  6px 6px 12px rgba(16, 27, 29, 0.15);
  --shadow-press: inset -3px -3px 6px rgba(255, 255, 255, 0.7),
                  inset 3px 3px 6px rgba(16, 27, 29, 0.1);

  --font-title: 'Poppins', sans-serif;
  --font-body: 'Inter', sans-serif;

  --sidebar-width: 240px;
  --topbar-height: 65px;
}

/* ===== RESET Y BASE ===== */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body, html {
  font-family: var(--font-body);
  background-color: var(--bg-light);
  color: var(--text-dark);
  height: 100%;
  scroll-behavior: smooth;
}

a {
  text-decoration: none;
  color: inherit;
}
/* ===== SIDEBAR ===== */
.sidebar {
  position: fixed;
  top: 0;
  left: 0;
  width: 70px;
  height: 100vh;
  background: linear-gradient(145deg, #E4EBF1, #F2F7FC);
  box-shadow: var(--shadow-raise);
  z-index: 100;
  display: flex;
  flex-direction: column;
  overflow-x: hidden;
  transition: width 0.3s ease;
}

.sidebar.expanded {
  width: var(--sidebar-width);
}

.sidebar-header,
.sidebar .menu-item span {
  display: none;
}

.sidebar.expanded .sidebar-header,
.sidebar.expanded .menu-item span {
  display: block;
}

.sidebar-menu {
  flex: 1;
  padding: 1rem 0.8rem;
  overflow-y: auto;
}

.menu-item {
  padding: 0.75rem 1rem;
  margin: 0.3rem 0;
  border-radius: 8px;
  display: flex;
  align-items: center;
  gap: 0.8rem;
  font-weight: 500;
  color: var(--gray-2);
  background: var(--bg-card);
  box-shadow: var(--shadow-raise);
  transition: all 0.3s ease;
}

.menu-item:hover {
  color: var(--text-dark);
  transform: translateY(-2px);
  box-shadow: -2px -2px 6px rgba(255, 255, 255, 0.9),
               4px 4px 8px rgba(16, 27, 29, 0.12);
}

.menu-item.active {
  color: var(--text-dark);
  font-weight: 600;
  background: linear-gradient(to right, #E4EBF1, #EFF2F9);
  box-shadow: var(--shadow-press);
}

.menu-item i {
  font-size: 0.95rem;
  min-width: 24px;
  text-align: center;
}


/* ===== TOPBAR ===== */
.topbar {
  position: fixed;
  top: 0;
  left: var(--sidebar-width);
  right: 0;
  height: var(--topbar-height);
  background: linear-gradient(to right, #EFF2F9, #F8FAFD);
  backdrop-filter: blur(8px);
  display: flex;
  justify-content: flex-end;
  align-items: center;
  padding: 0 2rem;
  z-index: 99;
  box-shadow: 0 2px 15px rgba(16, 27, 29, 0.08);
}

.search-container {
  display: flex;
  justify-content: flex-end;
  width: 100%;
  max-width: 450px;
}

.search-bar {
  width: 100%;
  max-width: 380px;
  height: 42px;
  border-radius: 21px;
  padding: 0 20px 0 48px;
  display: flex;
  align-items: center;
  background: rgba(255, 255, 255, 0.85);
  box-shadow: var(--shadow-raise);
  position: relative;
}

.search-bar i {
  position: absolute;
  left: 20px;
  color: var(--gray-1);
  font-size: 1rem;
}

.search-bar input {
  flex: 1;
  background: transparent;
  border: none;
  outline: none;
  color: var(--text-dark);
  font-size: 0.95rem;
  font-family: var(--font-body);
  padding-left: 8px;
}

/* ===== CONTENIDO PRINCIPAL ===== */
.main-content {
  margin-left: 80px; /* Igual al ancho del sidebar contraído */
  transition: margin-left 0.3s ease;
  margin-top: var(--topbar-height);
  padding: 2rem;
  min-height: calc(100vh - var(--topbar-height));
}

/* ===== REPORTES ===== */
.reports-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  padding: 0 0.5rem;
}

.reports-title {
  font-family: var(--font-title);
  font-weight: 700;
  font-size: 1.8rem;
  color: var(--text-dark);
  letter-spacing: -0.5px;
}

.reports-controls {
  display: flex;
  justify-content: flex-end; /* ← alinea todo a la derecha */
  align-items: center;
  gap: 1rem;
  flex-wrap: wrap;
  margin-top: 1rem;
}


.filter-controls {
  display: flex;
  gap: 1rem;
  align-items: center;
}

.right-actions {
  display: flex;
  align-items: center;
  gap: 1rem;
}


.search-bar {
  display: flex;
  align-items: center;
  background: white;
  border-radius: 30px;
  padding: 0.5rem 1rem;
  box-shadow: var(--shadow-raise);
}

.search-bar i {
  margin-right: 0.5rem;
  color: var(--gray-2);
}

.search-bar input {
  background: transparent;
  border: none;
  outline: none;
  color: var(--text-dark);
  font-size: 0.95rem;
  font-family: var(--font-body);
  padding-left: 8px;
}


.right-actions {
  display: flex;
  align-items: center;
  gap: 1rem;
}



.table-controls {
  display: flex;
  gap: 1.5rem;
  align-items: center;
}

/* ===== COMBOBOX Y PAGINACIÓN ===== */
.filter-controls {
  display: flex;
  gap: 1rem;
}

.filter-select {
  padding: 0.7rem 1.2rem;
  border-radius: 10px;
  border: none;
  background: var(--bg-card);
  font-family: var(--font-body);
  font-size: 0.9rem;
  color: var(--text-dark);
  cursor: pointer;
  box-shadow: 
    -3px -3px 6px rgba(255, 255, 255, 0.8),
    3px 3px 6px rgba(16, 27, 29, 0.15);
  transition: all 0.4s cubic-bezier(0.32, 0.72, 0.45, 1.1);
  appearance: none;
  -webkit-appearance: none;
  background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%236E7F8D' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right 0.8rem center;
  background-size: 1rem;
  padding-right: 2.5rem;
}

.filter-select:hover {
  box-shadow: 
    -2px -2px 4px rgba(255, 255, 255, 0.9),
    2px 2px 4px rgba(16, 27, 29, 0.1);
  transform: translateY(-1px);
}

/* ===== TABLA ===== */
.table-container {
  background: white;
  border-radius: 12px;
  box-shadow: var(--shadow-raise);
  overflow: hidden;
  padding: 1px;
}

table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
}

th {
  background: linear-gradient(to bottom, #E4EBF1, #EFF2F9);
  font-family: var(--font-title);
  font-weight: 600;
  font-size: 0.85rem;
  text-transform: uppercase;
  letter-spacing: 0.3px;
  color: var(--text-dark);
  padding: 1rem 1.5rem;
  text-align: left;
  position: sticky;
  top: 0;
}

td {
  padding: 1.2rem 1.5rem;
  border-bottom: 1px solid rgba(181, 191, 198, 0.2);
  background: white;
  transition: all 0.2s ease;
}

tr:hover td {
  background: rgba(228, 235, 241, 0.4);
}

/* PAGINACIÓN */
.pagination {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 1rem;
  margin-top: 2rem;
  padding: 0 0.5rem;
}

.pagination-btn {
  padding: 0.7rem 1.5rem;
  background: var(--bg-card);
  border: none;
  border-radius: 8px;
  font-family: var(--font-body);
  font-weight: 500;
  color: var(--gray-2);
  cursor: pointer;
  box-shadow: var(--shadow-soft);
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin: 0 10px;
}

.pagination-btn:hover {
  background: linear-gradient(to right, #E4EBF1, #EFF2F9);
  color: var(--text-dark);
  box-shadow: var(--shadow-press);
}

.page-numbers {
  display: flex;
  gap: 0.7rem;
  font-size: 0.85rem;
}

.page-numbers span {
  padding: 0.6rem 0.9rem;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.page-numbers span:hover {
  background-color: rgba(228, 235, 241, 0.6);
}

.page-numbers .active {
  background: linear-gradient(to right, #E4EBF1, #EFF2F9);
  font-weight: 600;
  color: var(--text-dark);
  box-shadow: var(--shadow-press);
}

a[href="#"]:hover {
  box-shadow: var(--shadow-press);
  color: var(--text-dark);
}

/* RESPONSIVE */
@media (max-width: 992px) {
  :root {
    --sidebar-width: 70px;
  }

  .sidebar-header h2 span,
  .menu-item span {
    display: none;
  }

  .menu-item {
    justify-content: center;
    padding: 0.75rem;
  }

  .search-bar {
    max-width: 300px;
  }
}

@media (max-width: 768px) {
  .sidebar {
    transform: translateX(-100%);
  }

  .sidebar.active {
    transform: translateX(0);
  }

  .topbar {
    left: 0;
  }

  .main-content {
    margin-left: 0;
  }
}

reportesView.css (vacio) :

 componentes ->
NavBar.Vue:
<template>
  <div class="sidebar" @mouseenter="expandirSidebar" @mouseleave="contraerSidebar" :class="{ expanded: sidebarExpandido }">
    <div class="sidebar-header logo-container">
      <img :src="logoActual" alt="Logo" class="sidebar-logo" />
    </div>
    <div class="sidebar-menu">
      <router-link to="/reportes" class="menu-item" :class="{ active: $route.name === 'Reportes' }">
        <i class="fas fa-file-alt"></i>
        <span>Reportes</span>
      </router-link>
      <router-link to="/usuarios" class="menu-item" :class="{ active: $route.name === 'Usuarios' }">
        <i class="fas fa-user-graduate"></i>
        <span>Usuarios</span>
      </router-link>
      <router-link to="/empresas" class="menu-item" :class="{ active: $route.name === 'Empresas' }">
        <i class="fas fa-building"></i>
        <span>Empresas</span>
      </router-link>
      <router-link to="/roles" class="menu-item" :class="{ active: $route.name === 'Roles' }">
        <i class="fas fa-user-shield"></i>
        <span>Roles</span>
      </router-link>
    </div>
  </div>
</template>

<script>
import logo from '@/assets/logo.png';
import logoExpanded from '@/assets/logo-expanded.png';

export default {
  name: "Navbar",
  data() {
    return {
      sidebarExpandido: false
    };
  },
  computed: {
    logoActual() {
      return this.sidebarExpandido ? logoExpanded : logo;
    }
  },
  methods: {
    expandirSidebar() {
      this.sidebarExpandido = true;
    },
    contraerSidebar() {
      this.sidebarExpandido = false;
    }
  }
};
</script>

<style scoped>
.sidebar-logo {
  width: 40px;
  height: 40px;
  object-fit: contain;
  display: block;
  margin: 0 auto;
  transition: all 0.3s ease;
}

.sidebar.expanded .sidebar-logo {
  width: 130px;
  height: 130px;
}

.logo-container {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 1.5rem;
}
</style>

TopBar.Vue:
<template>
    <div class="topbar">
      <!-- Botón de perfil -->
      <div class="profile-btn" @click="abrirPerfil">
        <i class="fas fa-user-circle"></i> <!-- Icono de perfil -->
      </div>
    </div>
  </template>
  
  <script>
  export default {
    name: 'Topbar',
    methods: {
      abrirPerfil() {
        console.log('Abrir perfil');
      },
    },
  };
  </script>
  
  <style scoped>
  .topbar {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    width:100;
    height: var(--topbar-height);
    background: linear-gradient(to right, #eff2f9, #f8fafc);
    backdrop-filter: blur(8px);
    display: flex;
    justify-content: flex-end;
    align-items: center;
    padding: 0 2rem;
    z-index: 99;
    box-shadow: 0 2px 15px rgba(16, 27, 29, 0.08);
  }
  
  .profile-btn {
    cursor: pointer;
    font-size: 2rem;
    color: #6e7f8d;
    transition: color 0.3s ease;
  }
  
  .profile-btn:hover {
    color: #2a3646;
  }
  </style>
  
layouts ->

MainLayout.Vue:
<template>
  <div>
    <Navbar :sidebarActive="sidebarActive" />
    <Topbar @toggle-sidebar="toggleSidebar" />
    <main class="main-content">
      <router-view />
    </main>
  </div>
</template>

<script>
import Navbar from "@/components/Navbar.vue";
import Topbar from "@/components/Topbar.vue";

export default {
  name: "MainLayout",
  components: {
    Navbar,
    Topbar,
  },
  data() {
    return {
      sidebarActive: false,
    };
  },
  methods: {
    toggleSidebar() {
      this.sidebarActive = !this.sidebarActive;
    },
  },
};
</script>

router ->
index.js:
import { createRouter, createWebHistory } from 'vue-router';
import LoginView from '@/views/LoginView.vue';
import DashboardView from '@/views/DashboardView.vue';
import EmpresasView from '@/views/EmpresasView.vue';
import UsuariosView from '@/views/UsuariosView.vue';
import RolesView from '@/views/RolesView.vue';
import ReportesView from '@/views/ReportesView.vue';
import MainLayout from '@/layouts/MainLayout.vue';
import apiClient from '@/services/apiClient';

const routes = [
  {
    path: '/',
    name: 'Login',
    component: LoginView
  },
  {
    path: '/',
    component: MainLayout,
    meta: { requiresAuth: true },
    children: [
      { path: 'dashboard', name: 'Dashboard', component: DashboardView },
      { path: 'empresas', name: 'Empresas', component: EmpresasView },
      { path: 'usuarios', name: 'Usuarios', component: UsuariosView },
      { path: 'roles', name: 'Roles', component: RolesView },
      { path: 'reportes', name: 'Reportes', component: ReportesView }
    ]
  }
];

const router = createRouter({
  history: createWebHistory(),
  routes
});

router.beforeEach(async (to, from, next) => {
  const token = localStorage.getItem('token');

  if (to.meta.requiresAuth) {
    if (!token) {
      next('/');
      return;
    }

    try {
      await apiClient.get('/verify-token'); 
      next();  
    } catch (error) {
      console.error('Token inválido:', error);
      localStorage.removeItem('token');
      localStorage.removeItem('logueado');
      next('/'); 
    }
  } else {
    next();
  }
});

export default router;

services ->
apiClient.js:
import axios from 'axios';

const apiClient = axios.create({
  baseURL: 'http://localhost:3000/api',
  headers: {
    'Content-Type': 'application/json',
  }
});

apiClient.interceptors.request.use(config => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
}, error => {
  return Promise.reject(error);
});

export default apiClient;

views ->
DashBoardView.Vue:
<template>
    <div class="dashboard-container">
      <h1>Bienvenido</h1>
      <p>Has iniciado sesión correctamente.</p>
    </div>
  </template>
  
  <script>
  export default {
    name: 'DashboardView'
  }
  </script>
  
  <style scoped>
  .dashboard-container {
    padding: 2rem;
  }
  </style>
  
EmpresasView.Vue:
    <template>
        <div class="view-container">
          <h1>Empresas</h1>
      
          <!-- Formulario Crear o Editar -->
          <form @submit.prevent="editando ? actualizarEmpresa() : crearEmpresa()">
            <input type="text" v-model="empresaForm.nombre" placeholder="Nombre de la empresa" required>
            <input type="text" v-model="empresaForm.descripcion" placeholder="Descripción">
            <input type="text" v-model="empresaForm.direccion" placeholder="Dirección">
            <input type="text" v-model="empresaForm.telefono" placeholder="Teléfono">
            <input type="email" v-model="empresaForm.correo" placeholder="Correo electrónico">
            <button type="submit">{{ editando ? 'Actualizar Empresa' : 'Crear Empresa' }}</button>
            <button v-if="editando" type="button" @click="cancelarEdicion" class="cancel-button">Cancelar</button>
          </form>
      
          <div v-if="empresas.length > 0" class="empresas-lista">
            <h2>Lista de Empresas:</h2>
            <ul>
              <li v-for="empresa in empresas" :key="empresa.empresa_id">
                {{ empresa.nombre }} - {{ empresa.descripcion }}
                <button @click="cargarEmpresa(empresa)" class="edit-button">Editar</button>
                <button @click="eliminarEmpresa(empresa.empresa_id)" class="delete-button">Eliminar</button>
              </li>
            </ul>
          </div>
          <div v-else>
            <p>No hay empresas registradas aún.</p>
          </div>
        </div>
      </template>
      
      <script>
      import apiClient from '@/services/apiClient';
      
        export default {
        name: 'EmpresasView',
        data() {
          return {
            empresas: [],
            empresaForm: {
              nombre: '',
              descripcion: '',
              direccion: '',
              telefono: '',
              correo: ''
            },
            editando: false,
            empresaIdEditar: null
          }
        },
        mounted() {
          const token = localStorage.getItem('token');
          console.log('Token actual en EmpresasView:', token);
          this.obtenerEmpresas();
        },
        methods: {
          async obtenerEmpresas() {
            try {
              const response = await apiClient.get('/empresas');
              this.empresas = response.data;
            } catch (error) {
              console.error('Error al obtener empresas:', error);
              alert('No se pudieron cargar las empresas');
            }
          },
          async crearEmpresa() {
            try {
              await apiClient.post('/empresas', this.empresaForm);
              alert('Empresa creada correctamente');
              this.resetFormulario();
              this.obtenerEmpresas();
            } catch (error) {
              console.error('Error al crear empresa:', error);
              alert('No se pudo crear la empresa');
            }
          },
          cargarEmpresa(empresa) {
            this.editando = true;
            this.empresaIdEditar = empresa.empresa_id;
            this.empresaForm = { ...empresa }; 
          },
          async actualizarEmpresa() {
            try {
              await apiClient.put(`/empresas/${this.empresaIdEditar}`, this.empresaForm);
              alert('Empresa actualizada correctamente');
              this.resetFormulario();
              this.obtenerEmpresas();
            } catch (error) {
              console.error('Error al actualizar empresa:', error);
              alert('No se pudo actualizar la empresa');
            }
          },
          cancelarEdicion() {
            this.resetFormulario();
          },
          async eliminarEmpresa(id) {
            if (!confirm('¿Estás seguro de eliminar esta empresa?')) {
              return;
            }
      
            try {
              await apiClient.delete(`/empresas/${id}`);
              alert('Empresa eliminada correctamente');
              this.obtenerEmpresas();
            } catch (error) {
              console.error('Error al eliminar empresa:', error);
              alert('No se pudo eliminar la empresa');
            }
          },
          resetFormulario() {
            this.empresaForm = {
              nombre: '',
              descripcion: '',
              direccion: '',
              telefono: '',
              correo: ''
            };
            this.editando = false;
            this.empresaIdEditar = null;
          }
        }
      }
      </script>
      
      <style scoped>
      .view-container {
        padding: 2rem;
      }
      input {
        display: block;
        margin-bottom: 1rem;
        width: 100%;
        max-width: 400px;
      }
      button {
        margin-right: 0.5rem;
        margin-bottom: 1rem;
      }
      .empresas-lista {
        margin-top: 2rem;
      }
      .edit-button {
        background-color: #3498db;
        color: white;
        border: none;
        padding: 0.3rem 0.6rem;
        cursor: pointer;
      }
      .edit-button:hover {
        background-color: #2980b9;
      }
      .delete-button {
        margin-left: 0.5rem;
        background-color: #e74c3c;
        color: white;
        border: none;
        padding: 0.3rem 0.6rem;
        cursor: pointer;
      }
      .delete-button:hover {
        background-color: #c0392b;
      }
      .cancel-button {
        background-color: #7f8c8d;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        cursor: pointer;
      }
      .cancel-button:hover {
        background-color: #626567;
      }
      </style>
      
LoginView.Vue:
<template>
    <div class="login-container">
      <h1>Iniciar Sesión</h1>
  
      <form @submit.prevent="modoRecuperacion ? recuperarPassword() : login()">
  
        <div v-if="!modoRecuperacion">
          <input type="text" v-model="user_name" placeholder="Usuario" required>
          <input type="password" v-model="password" placeholder="Contraseña" required>
          <button type="submit">Ingresar</button>
        </div>
  
        <div v-else>
          <input type="text" v-model="codigo_recuperacion" placeholder="Código de recuperación" required>
          <input type="password" v-model="nuevo_password" placeholder="Nueva contraseña" required>
          <input type="password" v-model="confirmar_password" placeholder="Confirmar contraseña" required>
          <button type="submit">Restablecer contraseña</button>
        </div>
  
      </form>
  
      <p @click="modoRecuperacion = !modoRecuperacion" style="cursor: pointer; color: blue; margin-top: 1rem;">
        {{ modoRecuperacion ? '¿Recordaste tu contraseña? Volver al login' : '¿Olvidaste tu contraseña?' }}
      </p>
  
    </div>
  </template>
  
  <script>
  import axios from 'axios';
  import apiClient from '@/services/apiClient';
  export default {
    data() {
      return {
        modoRecuperacion: false,
        user_name: '',
        password: '',
        codigo_recuperacion: '',
        nuevo_password: '',
        confirmar_password: ''
      }
    },
    created() {
      this.verificarSesion();
    },
    methods: {
      verificarSesion() {
        const token = localStorage.getItem('token');
        if (token) {
          this.$router.push('/reportes');
        }
      },
      async login() {
        try {
          const response = await apiClient.post('/login', {
            user_name: this.user_name,   
            password: this.password
          });

          console.log('Respuesta login:', response.data);

          if (response.data && response.data.token) {
            localStorage.setItem('token', response.data.token);
            localStorage.setItem('logueado', 'true');
            alert('Login exitoso');
            this.$router.push('/reportes');
          } else {
            alert('Login incorrecto: no se recibió token.');
          }
        } catch (error) {
          console.error('Error en login:', error);
          console.log('Detalle del error:', error.response?.data);
          alert('Error en el login: ' + (error.response?.data?.error || 'desconocido'));
        }
      },
      async recuperarPassword() {
        if (this.nuevo_password !== this.confirmar_password) {
          alert('Las contraseñas no coinciden');
          return;
        }
  
        try {
          const userResponse = await axios.get(`http://localhost:3000/api/usuarios`);
          const usuario = userResponse.data.find(u => u.user_name === this.user_name);
  
          if (!usuario) {
            alert('Usuario no encontrado');
            return;
          }
  
          await axios.post(`http://localhost:3000/api/usuarios/${usuario.usuario_id}/reset-password`, {
            codigo_recuperacion: this.codigo_recuperacion,
            nuevo_password: this.nuevo_password
          });
  
          alert('Contraseña restablecida correctamente');
          this.modoRecuperacion = false;
  
        } catch (error) {
          console.error(error);
          alert('Error al restablecer contraseña');
        }
      }
    }
  }
  </script>
  
  <style scoped>
  .login-container {
    max-width: 400px;
    margin: auto;
    padding: 2rem;
  }
  input {
    display: block;
    width: 100%;
    margin-bottom: 1rem;
  }
  button {
    width: 100%;
  }
  </style>
  
ReportesView.Vue:
<template>
  <div class="reports-header">
    <h1 class="reports-title">Reportes</h1>
  
    <div class="reports-controls">
      <div class="filter-controls">
        <select v-model="filtroSeleccionado" class="filter-select">
          <option value="todos">Todos los reportes</option>
          <option value="nombreAsc">Nombre A-Z</option>
          <option value="nombreDesc">Nombre Z-A</option>
          <option value="fechaEntrega">Fecha de entrega</option>
        </select>
        <input
          v-if="filtroSeleccionado === 'fechaEntrega'"
          type="date"
          class="filter-select"
          v-model="fechaSeleccionada"
        />
      </div>
  
      <div class="right-actions">
        <div class="search-bar">
          <i class="fas fa-search"></i>
          <input
            type="text"
            placeholder="Buscar reportes..."
            v-model="searchQuery"
            @input="filtrarReportes"
          />
        </div>
        <button @click="abrirModal" class="add-report-btn">
          <i class="fas fa-plus"></i>
        </button>
      </div>
    </div>
  </div>
  
  
      <div class="table-container">
        <table>
          <thead>
            <tr>
              <th>N° Control</th>
              <th @click="filtroSeleccionado = 'nombreAsc'; ordenar()">Nombre del Alumno</th>
              <th>Carrera</th>
              <th>Semestre</th>
              <th>Título</th>
              <th>Empresa</th>
              <th @click="filtroSeleccionado = 'fechaEntrega'; ordenar()">Fecha Subida</th>
              <th>Reporte</th>
            </tr>
          </thead>
  
          <tbody>
            <tr v-for="(reporte, index) in reportesPaginados" :key="index">
              <td>{{ reporte.numero_control }}</td>
              <td>{{ reporte.nombre_alumno }}</td>
              <td>{{ reporte.carrera }}</td>
              <td>{{ reporte.semestre }}</td>
              <td>{{ reporte.titulo_reporte }}</td>
              <td>{{ reporte.nombre_empresa }}</td>
              <td>{{ formatearFecha(reporte.fecha_entrega) }}</td>
              <td>
                <button class="icon-btn" @click="verPdf(reporte.ruta_pdf)">
                  <i class="fas fa-eye"></i>
                </button>
                <button class="icon-btn" @click="editarReporte(reporte)">
                  <i class="fas fa-pen"></i>
                </button>
                <button class="icon-btn trash-btn" @click="eliminarReporte(reporte)">
                  <i class="fas fa-trash"></i>
                </button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
  
      <div class="pagination">
        <button class="pagination-btn" @click="cambiarPagina('anterior')" :disabled="paginaActual === 1">
          <i class="fas fa-chevron-left"></i> Previous
        </button>
        <div class="page-numbers">
          <span v-for="pagina in paginasTotales" :key="pagina" :class="{ active: pagina === paginaActual }" @click="paginaActual = pagina">
            {{ pagina }}
          </span>
        </div>
        <button class="pagination-btn" @click="cambiarPagina('siguiente')" :disabled="paginaActual === paginasTotales">
          Next <i class="fas fa-chevron-right"></i>
        </button>
      </div>
  
      <div v-if="mostrarModal" class="modal-overlay">
        <div class="modal-content">
          <h2>{{ modoEdicion ? 'Editar Reporte' : 'Crear Nuevo Reporte' }}</h2>
          <form @submit.prevent="guardarReporte">
            <input class="modal-input" type="text" v-model="nuevoReporte.nombre_alumno" placeholder="Nombre del Alumno" required />
            <input class="modal-input" type="text" v-model="nuevoReporte.numero_control" placeholder="Número de Control" required />
            <input class="modal-input" type="text" v-model="nuevoReporte.carrera" placeholder="Carrera" required />
            <input class="modal-input" type="text" v-model="nuevoReporte.semestre" placeholder="Semestre" required />
            <input class="modal-input" type="text" v-model="nuevoReporte.titulo_reporte" placeholder="Título del Reporte" required />
            <select v-model="nuevoReporte.empresa_id" class="filter-select" required>
              <option disabled value="">Selecciona una empresa</option>
              <option v-for="empresa in empresas" :key="empresa.empresa_id" :value="empresa.empresa_id">
                {{ empresa.nombre }}
              </option>
            </select>
            <label class="upload-label">
              <i class="fas fa-file-upload"></i> Seleccionar PDF
              <input type="file" accept="application/pdf" @change="handlePdfUpload" hidden />
            </label>
            <p v-if="nombreArchivo">Archivo seleccionado: {{ nombreArchivo }}</p>
            <div class="modal-buttons">
              <button type="submit" class="btn-primary">Guardar</button>
              <button type="button" class="btn-secondary" @click="cerrarModal">Cancelar</button>
            </div>
          </form>
        </div>
      </div>
  
      <div v-if="mostrarModalEliminar" class="modal-overlay">
        <div class="modal-content">
          <h2>¿Deseas borrar el reporte?</h2>
          <div class="modal-buttons">
            <button @click="confirmarEliminarReporte" class="btn-primary">Sí, eliminar</button>
            <button @click="cancelarEliminarReporte" class="btn-secondary">Cancelar</button>
          </div>
        </div>
      </div>
  </template>
  
  
  <script>
  import apiClient from '@/services/apiClient';
  
  export default {
    name: "ReportesView",
    data() {
      return {
        filtroSeleccionado: "todos",
        fechaSeleccionada: '',
        searchQuery: '',
        reportes: [],
        reportesBase: [],
        paginaActual: 1,
        reportesPorPagina: 5,
        mostrarModal: false,
        modoEdicion: false,
        mostrarModalEliminar: false,
        reporteAEliminar: null,
        empresas: [],
        archivoPdf: null,
        nombreArchivo: "",
        nuevoReporte: {
          nombre_alumno: "",
          numero_control: "",
          carrera: "",
          semestre: "",
          titulo_reporte: "",
          empresa_id: ""
        }
      };
    },
    computed: {
      paginasTotales() {
        return Math.ceil(this.reportes.length / this.reportesPorPagina);
      },
      reportesPaginados() {
        const inicio = (this.paginaActual - 1) * this.reportesPorPagina;
        return this.reportes.slice(inicio, inicio + this.reportesPorPagina);
      }
    },
    methods: {
      filtrarReportes() {
        const query = this.searchQuery.toLowerCase();
  
        this.reportes = this.reportesBase.filter(r =>
          r.nombre_alumno.toLowerCase().includes(query) ||
          r.numero_control.toLowerCase().includes(query) ||
          r.nombre_empresa.toLowerCase().includes(query) ||
          r.semestre.toString().includes(query)
  
        );
  
      },
      formatearFecha(fecha) {
      if (!fecha) return '-';
      const date = new Date(fecha);
      return date.toLocaleDateString('es-MX');
    },
      async cargarReportes() {
    try {
      const { data } = await apiClient.get('/reportes');
      this.reportes = data;
      this.reportesBase = [...data];
    } catch (error) {
      console.error('Error al cargar reportes:', error);
    }
    },
      async cargarEmpresas() {
        try {
          const { data } = await apiClient.get('/empresas');
          this.empresas = data;
        } catch (error) {
          console.error('Error al cargar empresas:', error);
        }
      },
      cambiarPagina(direccion) {
        if (direccion === 'anterior' && this.paginaActual > 1) this.paginaActual--;
        if (direccion === 'siguiente' && this.paginaActual < this.paginasTotales) this.paginaActual++;
      },
      ordenar() {
  const orden = this.filtroSeleccionado;

  let lista = [...this.reportesBase]; // comienza desde los datos base

  if (orden === 'nombreAsc') {
    lista.sort((a, b) => a.nombre_alumno.localeCompare(b.nombre_alumno));
  } else if (orden === 'nombreDesc') {
    lista.sort((a, b) => b.nombre_alumno.localeCompare(a.nombre_alumno));
  } else if (orden === 'fechaEntrega') {
    lista.sort((a, b) => new Date(b.fecha_entrega) - new Date(a.fecha_entrega));
  }

  // aplicar búsqueda después del ordenamiento si hay texto
  if (this.searchQuery) {
    const query = this.searchQuery.toLowerCase();
    lista = lista.filter(r =>
      r.nombre_alumno.toLowerCase().includes(query) ||
      r.numero_control.toLowerCase().includes(query) ||
      r.titulo_reporte.toLowerCase().includes(query) ||
      r.carrera.toLowerCase().includes(query)
      );
    }

    this.reportes = lista;
  },
      verPdf(ruta) {
    if (ruta) {
      const rutaLimpiada = ruta.replace(/^reportes[\\/]/, ''); // elimina el "reportes/" del inicio
      window.open(`http://localhost:3000/reportes/${rutaLimpiada}`, '_blank');
      } else {
        alert('No se encontró el PDF.');
      }
    },
      abrirModal() {
        this.modoEdicion = false;
        this.mostrarModal = true;
        this.resetFormulario();
      },
      cerrarModal() {
        this.mostrarModal = false;
        this.resetFormulario();
      },
      resetFormulario() {
        this.nuevoReporte = {
          nombre_alumno: "",
          numero_control: "",
          carrera: "",
          semestre: "",
          titulo_reporte: "",
          empresa_id: ""
        };
        this.archivoPdf = null;
        this.nombreArchivo = "";
      },
      handlePdfUpload(e) {
        const file = e.target.files[0];
        if (file) {
          this.archivoPdf = file;
          this.nombreArchivo = file.name;
        }
      },
      editarReporte(reporte) {
        this.modoEdicion = true;
        this.mostrarModal = true;
        this.nuevoReporte = {
          proyecto_id: reporte.proyecto_id, 
          nombre_alumno: reporte.nombre_alumno,
          numero_control: reporte.numero_control,
          carrera: reporte.carrera,
          semestre: reporte.semestre,
          titulo_reporte: reporte.titulo_reporte,
          empresa_id: reporte.empresa_id || "",
          ruta_pdf: reporte.ruta_pdf
        };
        this.archivoPdf = null;
        this.nombreArchivo = reporte.ruta_pdf;
      },
      eliminarReporte(reporte) {
        this.reporteAEliminar = reporte;
        this.mostrarModalEliminar = true;
      },
      cancelarEliminarReporte() {
        this.mostrarModalEliminar = false;
        this.reporteAEliminar = null;
      },
      async confirmarEliminarReporte() {
        try {
          await apiClient.delete(`/reportes/${this.reporteAEliminar.proyecto_id}`);
          this.mostrarModalEliminar = false;
          this.reporteAEliminar = null;
          this.cargarReportes();
          alert('Reporte eliminado correctamente');
        } catch (error) {
          console.error('Error al eliminar reporte:', error);
          alert('Error al eliminar el reporte');
        }
      },
      async guardarReporte() {
    try {
      if (!this.nuevoReporte.empresa_id) {
        alert('Por favor selecciona una empresa');
        return;
      }
  
      if (this.modoEdicion) {
        // 🔁 Modo edición
        if (this.archivoPdf) {
          const formData = new FormData();
          formData.append('nombre_alumno', this.nuevoReporte.nombre_alumno);
          formData.append('numero_control', this.nuevoReporte.numero_control);
          formData.append('carrera', this.nuevoReporte.carrera);
          formData.append('semestre', this.nuevoReporte.semestre);
          formData.append('titulo_reporte', this.nuevoReporte.titulo_reporte);
          formData.append('empresa_id', this.nuevoReporte.empresa_id);
          formData.append('pdf', this.archivoPdf);
  
          await apiClient.put(`/reportes/${this.nuevoReporte.proyecto_id}`, formData, {
            headers: { 'Content-Type': 'multipart/form-data' }
          });
        } else {
          await apiClient.put(`/reportes/${this.nuevoReporte.proyecto_id}`, {
            nombre_alumno: this.nuevoReporte.nombre_alumno,
            numero_control: this.nuevoReporte.numero_control,
            carrera: this.nuevoReporte.carrera,
            semestre: this.nuevoReporte.semestre,
            titulo_reporte: this.nuevoReporte.titulo_reporte,
            empresa_id: this.nuevoReporte.empresa_id,
            ruta_pdf: this.nuevoReporte.ruta_pdf
          });
        }
  
        alert('Reporte actualizado correctamente');
      } else {
        // ➕ Crear nuevo reporte
        const formData = new FormData();
        const fechaHoy = new Date().toISOString().split('T')[0];
  
        formData.append('nombre_alumno', this.nuevoReporte.nombre_alumno);
        formData.append('numero_control', this.nuevoReporte.numero_control);
        formData.append('carrera', this.nuevoReporte.carrera);
        formData.append('semestre', this.nuevoReporte.semestre);
        formData.append('titulo_reporte', this.nuevoReporte.titulo_reporte);
        formData.append('empresa_id', this.nuevoReporte.empresa_id);
        formData.append('fecha_entrega', fechaHoy);
        formData.append('pdf', this.archivoPdf);
  
        await apiClient.post('/reportes', formData, {
          headers: { 'Content-Type': 'multipart/form-data' }
        });
  
        alert('Reporte creado correctamente');
      }
  
      this.cerrarModal();
      this.cargarReportes();
    } catch (error) {
      console.error('Error al guardar o actualizar reporte:', error);
      alert('Error al guardar o actualizar el reporte');
    }
  }
    },
  
    mounted() {
      this.cargarReportes();
      this.cargarEmpresas();
    },
  
    watch: {
  filtroSeleccionado() {
      this.ordenar();
      if (this.filtroSeleccionado !== 'fechaEntrega') {
        this.fechaSeleccionada = '';
      }
    },
    fechaSeleccionada() {
      if (this.fechaSeleccionada) {
        this.reportes = this.reportesBase.filter(r =>
          r.fecha_entrega?.startsWith(this.fechaSeleccionada)
        );
      } else {
        this.ordenar();
      }
    },
    searchQuery() {
      this.ordenar();
    }
  }};
  </script>
  
  
  <style scoped>
  .modal-overlay {
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background: rgba(0, 0, 0, 0.2);
    backdrop-filter: blur(5px); 
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 2000;
  }
  
  
  .modal-content {
    background: #fff;
    padding: 2rem;
    border-radius: 10px;
    width: 400px;
    box-shadow: var(--shadow-raise);
    position: relative;
    
  }
  
  .modal-content h2 {
    margin-bottom: 1rem;
    font-family: var(--font-title);
  }
  
  .modal-content form input {
    width: 100%;
    margin-bottom: 1rem;
    padding: 0.7rem;
    border: 0px solid var(--gray-1);
    border-radius: 8px;
  }
  
  .modal-content select {
    margin-bottom: 1rem;
    width: 100%;
  }
  
  
  .upload-label {
    display: block;         
    width: 100%;             
    text-align: center;      
    background: var(--bg-card);
    padding: 0.7rem 1rem;
    border-radius: 8px;
    cursor: pointer;
    color: var(--gray-2);
    box-shadow: var(--shadow-raise);
    margin-bottom: 1rem;
  }
  
  
  .upload-label:hover {
    background: #f8fafd;
  }
  
  .modal-buttons {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
  }
  
  .btn-primary, .btn-secondary {
    flex: 1;
    padding: 0.8rem;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 600;
  }
  
  .btn-primary {
    background: #2a3646;
    color: #fff;
  }
  
  .btn-secondary {
    background: #e4ebf1;
    color: var(--text-dark);
  }
  
  
   /* Botón para crear reporte */
   .add-report-btn {
      background-color: #EFF2F9;
      border: none;
      border-radius: 40%;
      padding: 0.70rem;
      box-shadow: var(--shadow-raise);
      font-size: 1rem;
      color: var(--text-dark);
      cursor: pointer;
      transition: 0.3s ease;
      margin-top: 0px;
      margin-left: auto; 
      display: block;
      }
  
    
    .add-report-btn:hover {
      background-color: #F8FAFD;
      box-shadow: var(--shadow-press);
    }
  
    .modal-input {
    width: 100%;
    margin-bottom: 1rem;
    padding: 0.8rem;
    border: none;
    border-radius: 12px;
    background: #f1f7fd; /* Más clarito que var(--bg-card) */
    box-shadow: var(--shadow-raise);
    font-family: var(--font-body);
    font-size: 0.80rem;
    color: var(--text-dark);
    transition: 0.3s ease;
  }
  
  
  .modal-input:focus {
    outline: none;
    box-shadow: var(--shadow-press);
    background: #fff;
  }
  
  .icon-btn {
    background: transparent;
    border: none;
    cursor: pointer;
    font-size: 1.2rem;
    color: var(--text-dark);
    padding: 0.3rem;
    margin: 0 0.2rem;
  }
  
  .icon-btn:hover {
    color: #2a3646;
  }
  
  .trash-btn {
    color: #e74c3c;
  }
  
  .trash-btn:hover {
    color: #c0392b;
  }
    </style>

RolesView.Vue:
<template>
    <div class="view-container">
      <h1>Roles</h1>
  
      <!-- Formulario Crear o Editar -->
      <form @submit.prevent="editando ? actualizarRol() : crearRol()">
        <input type="text" v-model="rolForm.nombre_rol" placeholder="Nombre del rol" required>
        <input type="text" v-model="rolForm.descripcion" placeholder="Descripción del rol">
        <button type="submit">{{ editando ? 'Actualizar Rol' : 'Crear Rol' }}</button>
        <button v-if="editando" type="button" @click="cancelarEdicion" class="cancel-button">Cancelar</button>
      </form>
  
      <div v-if="roles.length > 0" class="roles-lista">
        <h2>Lista de Roles:</h2>
        <ul>
          <li v-for="rol in roles" :key="rol.rol_id">
            {{ rol.nombre_rol }} - {{ rol.descripcion }}
            <button @click="cargarRol(rol)" class="edit-button">Editar</button>
            <button @click="eliminarRol(rol.rol_id)" class="delete-button">Eliminar</button>
          </li>
        </ul>
      </div>
      <div v-else>
        <p>No hay roles registrados aún.</p>
      </div>
    </div>
  </template>
  
  <script>
  import apiClient from '@/services/apiClient';
  
  export default {
    name: 'RolesView',
    data() {
      return {
        roles: [],
        rolForm: {
          nombre_rol: '',
          descripcion: ''
        },
        editando: false,
        rolIdEditar: null
      }
    },
    created() {
      this.obtenerRoles();
    },
    methods: {
      async obtenerRoles() {
        try {
          const response = await apiClient.get('/roles');
          this.roles = response.data;
        } catch (error) {
          console.error('Error al obtener roles:', error);
          alert('No se pudieron cargar los roles');
        }
      },
      async crearRol() {
        try {
          await apiClient.post('/roles', this.rolForm);
          alert('Rol creado correctamente');
          this.resetFormulario();
          this.obtenerRoles();
        } catch (error) {
          console.error('Error al crear rol:', error);
          alert('No se pudo crear el rol');
        }
      },
      cargarRol(rol) {
        this.editando = true;
        this.rolIdEditar = rol.rol_id;
        this.rolForm = {
          nombre_rol: rol.nombre_rol,
          descripcion: rol.descripcion
        };
      },
      async actualizarRol() {
        try {
          await apiClient.put(`/roles/${this.rolIdEditar}`, this.rolForm);
          alert('Rol actualizado correctamente');
          this.resetFormulario();
          this.obtenerRoles();
        } catch (error) {
          console.error('Error al actualizar rol:', error);
          alert('No se pudo actualizar el rol');
        }
      },
      cancelarEdicion() {
        this.resetFormulario();
      },
      async eliminarRol(id) {
        if (!confirm('¿Estás seguro de eliminar este rol?')) {
          return;
        }
  
        try {
          await apiClient.delete(`/roles/${id}`);
          alert('Rol eliminado correctamente');
          this.obtenerRoles();
        } catch (error) {
          console.error('Error al eliminar rol:', error);
          alert('No se pudo eliminar el rol');
        }
      },
      resetFormulario() {
        this.rolForm = {
          nombre_rol: '',
          descripcion: ''
        };
        this.editando = false;
        this.rolIdEditar = null;
      }
    }
  }
  </script>
  
  <style scoped>
  .view-container {
    padding: 2rem;
  }
  input {
    display: block;
    margin-bottom: 1rem;
    width: 100%;
    max-width: 400px;
  }
  button {
    margin-right: 0.5rem;
    margin-bottom: 1rem;
  }
  .roles-lista {
    margin-top: 2rem;
  }
  .edit-button {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 0.3rem 0.6rem;
    cursor: pointer;
  }
  .edit-button:hover {
    background-color: #2980b9;
  }
  .delete-button {
    background-color: #e74c3c;
    color: white;
    border: none;
    padding: 0.3rem 0.6rem;
    cursor: pointer;
  }
  .delete-button:hover {
    background-color: #c0392b;
  }
  .cancel-button {
    background-color: #7f8c8d;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    cursor: pointer;
  }
  .cancel-button:hover {
    background-color: #626567;
  }
  </style>
  
UsuariosView.vue:
<template>
  <div class="reports-header">
    <h1 class="reports-title">Usuarios</h1>

    <div class="reports-controls">
      <div class="right-actions">
        <div class="search-bar">
          <i class="fas fa-search"></i>
          <input
            type="text"
            placeholder="Buscar usuarios..."
            v-model="searchQuery"
            @input="filtrarUsuarios"
          />
        </div>
        <button @click="abrirModal" class="add-report-btn">
          <i class="fas fa-plus"></i>
        </button>
      </div>
    </div>
  </div>

  <div class="table-container">
    <table>
      <thead>
        <tr>
          <th>Nombre de Usuario</th>
          <th>Correo</th>
          <th>Rol</th>
          <th>Acciones</th>
        </tr>
      </thead>

      <tbody>
        <tr v-for="usuario in usuariosFiltrados" :key="usuario.usuario_id">
          <td>{{ usuario.user_name }}</td>
          <td>{{ usuario.email }}</td>
          <td>{{ usuario.nombre_rol }}</td>
          <td>
            <button class="icon-btn" @click="editarUsuario(usuario)">
              <i class="fas fa-pen"></i>
            </button>
            <button class="icon-btn trash-btn" @click="confirmarEliminar(usuario.usuario_id)">
              <i class="fas fa-trash"></i>
            </button>
            <label class="switch">
              <input type="checkbox" :checked="usuario.is_active" @change="cambiarEstadoUsuario(usuario)" />
              <span class="slider round"></span>
            </label>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div v-if="mostrarModal" class="modal-overlay">
    <div class="modal-content">
      <h2>{{ modoEdicion ? 'Editar Usuario' : 'Crear Nuevo Usuario' }}</h2>
      
      <form @submit.prevent="guardarUsuario">
        <input class="modal-input" type="text" v-model="nuevoUsuario.user_name" placeholder="Nombre de usuario" required />
        <input class="modal-input" type="email" v-model="nuevoUsuario.email" placeholder="Correo electrónico" required />
        <input v-if="!modoEdicion" class="modal-input" type="password" v-model="nuevoUsuario.password" placeholder="Contraseña" required />
        <select class="filter-select" v-model="nuevoUsuario.rol_id" required>
          <option disabled value="">Selecciona un rol</option>
          <option v-for="rol in roles" :key="rol.rol_id" :value="rol.rol_id">{{ rol.nombre_rol }}</option>
        </select>
        <div class="modal-buttons">
          <button type="submit" class="btn-primary">Guardar</button>
          <button type="button" class="btn-secondary" @click="cerrarModal">Cancelar</button>
        </div>
      </form>
    </div>
  </div>

  <div v-if="mostrarModalEliminar" class="modal-overlay">
    <div class="modal-content">
      <h2>¿Estás seguro que deseas eliminar este usuario?</h2>
      <div class="modal-buttons">
        <button class="btn-primary" @click="eliminarUsuarioConfirmado">Sí, eliminar</button>
        <button class="btn-secondary" @click="cancelarEliminar">Cancelar</button>
      </div>
    </div>
  </div>
</template>

<script>
import apiClient from '@/services/apiClient';

export default {
  name: 'UsuariosView',
  data() {
    return {
      usuarios: [],
      roles: [],
      searchQuery: '',
      mostrarModal: false,
      modoEdicion: false,
      mostrarModalEliminar: false,
      idAEliminar: null,
      nuevoUsuario: {
        user_name: '',
        email: '',
        password: '',
        rol_id: ''
      }
    };
  },
  computed: {
    usuariosFiltrados() {
      const query = this.searchQuery.toLowerCase();
      return this.usuarios.filter(u =>
        u.user_name.toLowerCase().includes(query) ||
        u.email.toLowerCase().includes(query)
      );
    },
  },
  methods: {
    async cargarUsuarios() {
      try {
        const { data } = await apiClient.get('/usuarios');
        console.log('Usuarios cargados:', data);
        this.usuarios = data;
      } catch (error) {
        console.error('Error al cargar usuarios:', error);
      }
    },
    async cargarRoles() {
      try {
        const { data } = await apiClient.get('/roles');
        this.roles = data;
      } catch (error) {
        console.error('Error al cargar roles:', error);
      }
    },
    confirmarEliminar(id) {
      this.idAEliminar = id;
      this.mostrarModalEliminar = true;
    },
    cancelarEliminar() {
      this.mostrarModalEliminar = false;
      this.idAEliminar = null;
    },
    async eliminarUsuarioConfirmado() {
      try {
        await apiClient.delete(`/usuarios/${this.idAEliminar}`);
        alert('Usuario eliminado correctamente');
        this.mostrarModalEliminar = false;
        this.cargarUsuarios();
      } catch (error) {
        console.error('Error al eliminar usuario:', error);
      }
    },
    async cambiarEstadoUsuario(usuario) {
      try {
        await apiClient.put(`/usuarios/${usuario.usuario_id}/status`, {
          is_active: !usuario.is_active,
        });
        usuario.is_active = !usuario.is_active;
      } catch (error) {
        console.error('Error al cambiar estado del usuario:', error);
      }
    },
    abrirModal() {
      this.resetFormulario();
      this.modoEdicion = false;
      this.mostrarModal = true;
    },
    editarUsuario(usuario) {
      console.log(usuario);
      this.nuevoUsuario = {
        user_name: usuario.user_name,
        email: usuario.email,
        password: '',
        rol_id: usuario.rol_id,
        usuario_id: usuario.usuario_id
      };
      this.modoEdicion = true;
      this.mostrarModal = true;
    },
    cerrarModal() {
      this.mostrarModal = false;
      this.resetFormulario();
    },
    resetFormulario() {
      this.nuevoUsuario = {
        user_name: '',
        email: '',
        password: '',
        rol_id: ''
      };
    },
    async guardarUsuario() {
      try {
        if (this.modoEdicion) {
          await apiClient.put(`/usuarios/${this.nuevoUsuario.usuario_id}`, {
            user_name: this.nuevoUsuario.user_name,
            email: this.nuevoUsuario.email,
            rol_id: this.nuevoUsuario.rol_id
          });
          alert('Usuario actualizado correctamente');
        } else {
          await apiClient.post('/usuarios', this.nuevoUsuario);
          alert('Usuario creado correctamente');
        }
        this.cerrarModal();
        this.cargarUsuarios();
      } catch (error) {
        console.error('Error al guardar usuario:', error);
        alert('Error al guardar usuario');
      }
    }
  },
  mounted() {
    this.cargarUsuarios();
    this.cargarRoles();
  },
};
</script>

<style scoped>
.switch {
  margin-top: 0px;
  position: fixed;
  display: inline-block;
  width: 42px;
  height: 24px;
}


.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  transition: .4s;
  border-radius: 24px;
}

.slider:before {
  position: absolute;
  content: "";
  height: 18px;
  width: 18px;
  left: 3px;
  bottom: 3px;
  background-color: white;
  transition: .4s;
  border-radius: 50%;
}

input:checked + .slider {
  background-color: #4CAF50;
}

input:checked + .slider:before {
  transform: translateX(18px);
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.2);
  backdrop-filter: blur(5px);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 2000;
}

.modal-content {
  background: #fff;
  padding: 2rem;
  border-radius: 10px;
  width: 400px;
  box-shadow: var(--shadow-raise);
  position: relative;
}

.modal-buttons {
  display: flex;
  justify-content: space-between;
  gap: 1rem;
  margin-top: 1rem;
}

.btn-primary,
.btn-secondary {
  flex: 1;
  padding: 0.8rem;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 600;
}

.btn-primary {
  background: #2a3646;
  color: #fff;
}

.btn-secondary {
  background: #e4ebf1;
  color: var(--text-dark);
}

.modal-input {
  width: 100%;
  margin-bottom: 1rem;
  padding: 0.8rem;
  border: none;
  border-radius: 12px;
  background: #f1f7fd;
  box-shadow: var(--shadow-raise);
  font-family: var(--font-body);
  font-size: 0.85rem;
  color: var(--text-dark);
  transition: 0.3s ease;
}

.modal-input:focus {
  outline: none;
  box-shadow: var(--shadow-press);
  background: #fff;
}

.filter-select {
  width: 100%;
  margin-bottom: 1rem;
  padding: 0.8rem;
  border: none;
  border-radius: 12px;
  background: #f1f7fd;
  box-shadow: var(--shadow-raise);
  font-family: var(--font-body);
  font-size: 0.85rem;
  color: var(--text-dark);
  transition: 0.3s ease;
  appearance: none;
  background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%236E7F8D' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right 0.8rem center;
  background-size: 1rem;
  padding-right: 2.5rem;
}

.icon-btn {
  background: transparent;
  border: none;
  cursor: pointer;
  font-size: 1.2rem;
  color: var(--text-dark);
  padding: 0.1rem;
  margin: 0 0.2rem;
}

.icon-btn:hover {
  color: #2a3646;
}

.trash-btn {
  color: #e74c3c;
}

.trash-btn:hover {
  color: #c0392b;
}

.add-report-btn {
  background-color: #EFF2F9;
  border: none;
  border-radius: 40%;
  padding: 0.70rem;
  box-shadow: var(--shadow-raise);
  font-size: 1rem;
  color: var(--text-dark);
  cursor: pointer;
  transition: 0.3s ease;
}

.add-report-btn:hover {
  background-color: #F8FAFD;
  box-shadow: var(--shadow-press);
}

</style>

